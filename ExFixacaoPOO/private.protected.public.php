<?php
// Exerc√≠cio 2 ‚Äì Classe Funcion√°rio (uso de protected)

// Crie uma classe Funcionario com:

// Atributos protegidos: nome, salario.

// M√©todo p√∫blico __construct($nome, $salario).

// M√©todo p√∫blico getInfo() que retorna o nome e o sal√°rio.

// Depois crie uma classe Gerente que herda de Funcionario, e adicione:

// Um b√¥nus de 20% no sal√°rio, acessando o atributo salario herdado (gra√ßas ao protected).

// Um m√©todo getSalarioComBonus().

// üëâ Objetivo: testar o protected, que n√£o pode ser acessado fora da classe, mas pode ser acessado por classes filhas.

class Funcionarios
{
    protected  $nome;
    protected  $salario;

    public function __construct($nome , $salario)
    {
        $this->nome = $nome;
        $this->salario = $salario;
    }

    // M√©todo p√∫blico getInfo() que retorna o nome e o sal√°rio.
    public function getInfo()
    {
      return "Nome: ". $this->nome . ' | Salario R$: ' . $this->salario . '<br/>';
      

    }

}
// Depois crie uma classe Gerente que herda de Funcionario, e adicione:

// Um b√¥nus de 20% no sal√°rio, acessando o atributo salario herdado (gra√ßas ao protected).

class Gerente extends Funcionarios
{
   public function SalarioComBonus()
   {
    return $this->salario += ($this->salario * 0.20);

   }
}


$funcionario = new Funcionarios("Rafael ", 1000);
echo $funcionario->getInfo() .  '<br/>';

$gerente = new Gerente("Claudio" , 1000);
echo 'Salario do Gerente com bonus de 20%. <br/> R$: '.$gerente->SalarioComBonus();

echo '<hr/>';

// Exerc√≠cio 3 ‚Äì Classe Produto (uso combinado de public, private e protected)

// Crie uma classe Produto com:

// Atributos privados: nome, preco.

// Um atributo protegido: desconto.

// M√©todo p√∫blico setDesconto($valor) que altera o desconto (m√°x 50%).

// M√©todo p√∫blico getPrecoFinal() que retorna o pre√ßo com desconto aplicado.

// Depois crie uma classe ProdutoDigital que herda de Produto e redefine o desconto para 10% a mais automaticamente.

// üëâ Objetivo: misturar public, private e protected, garantindo que s√≥ os m√©todos controlam o acesso.

echo '<hr/>'

// Exerc√≠cio 1 ‚Äì Classe Conta Banc√°ria (uso de private)

// Crie uma classe chamada ContaBancaria que tenha:

// Atributos privados: saldo, titular.

// Um m√©todo p√∫blico depositar($valor) que aumenta o saldo.

// Um m√©todo p√∫blico sacar($valor) que s√≥ permite sacar se tiver saldo suficiente.

// Um m√©todo p√∫blico getSaldo() que retorna o saldo.

// üëâ Objetivo: voc√™ deve usar private nos atributos para impedir acesso direto, e s√≥ manipular o saldo via m√©todos.
?>